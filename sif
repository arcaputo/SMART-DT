import React, { useState, useEffect, useRef } from 'react';
import { Activity, AlertTriangle, CheckCircle, MessageSquare, Send, Zap, TrendingUp, Bot } from 'lucide-react';

const SIF400DigitalTwin = () => {
  // State management
  const [stationData, setStationData] = useState({
    'SIF-401': { voltage: 220, current: 15.2, status: 'normal', trend: [] },
    'SIF-402': { voltage: 218, current: 14.8, status: 'normal', trend: [] },
    'SIF-405': { voltage: 221, current: 15.5, status: 'normal', trend: [] },
    'SIF-407': { voltage: 219, current: 15.1, status: 'normal', trend: [] }
  });

  const [alerts, setAlerts] = useState([]);
  const [chatMessages, setChatMessages] = useState([
    { role: 'assistant', content: 'Hello! I\'m your SIF-400 Digital Twin Assistant. Ask me anything about the station\'s voltage and current status.' }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const chatEndRef = useRef(null);

  // Simulate real-time data updates
  useEffect(() => {
    const interval = setInterval(() => {
      setStationData(prev => {
        const updated = { ...prev };
        Object.keys(updated).forEach(station => {
          // Generate realistic variations
          const voltageVariation = (Math.random() - 0.5) * 2;
          const currentVariation = (Math.random() - 0.5) * 0.5;

          updated[station].voltage = Math.max(215, Math.min(225, updated[station].voltage + voltageVariation));
          updated[station].current = Math.max(14, Math.min(16, updated[station].current + currentVariation));

          // Update trend data (keep last 20 points)
          const newTrend = [...updated[station].trend, {
            voltage: updated[station].voltage,
            current: updated[station].current,
            timestamp: new Date().toLocaleTimeString()
          }].slice(-20);
          updated[station].trend = newTrend;

          // Anomaly detection
          if (updated[station].voltage < 216 || updated[station].voltage > 224) {
            updated[station].status = 'warning';
            const alertExists = alerts.find(a => a.station === station && a.type === 'voltage');
            if (!alertExists) {
              setAlerts(prev => [...prev, {
                id: Date.now(),
                station,
                type: 'voltage',
                message: `Voltage anomaly detected: ${updated[station].voltage.toFixed(1)}V`,
                timestamp: new Date().toLocaleTimeString()
              }]);
            }
          } else if (updated[station].current < 14.5 || updated[station].current > 15.8) {
            updated[station].status = 'warning';
            const alertExists = alerts.find(a => a.station === station && a.type === 'current');
            if (!alertExists) {
              setAlerts(prev => [...prev, {
                id: Date.now(),
                station,
                type: 'current',
                message: `Current anomaly detected: ${updated[station].current.toFixed(1)}A`,
                timestamp: new Date().toLocaleTimeString()
              }]);
            }
          } else {
            updated[station].status = 'normal';
          }
        });
        return updated;
      });
    }, 2000);

    return () => clearInterval(interval);
  }, [alerts]);

  // Auto-scroll chat
  useEffect(() => {
    chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [chatMessages]);

  // Handle chat submission
  const handleChatSubmit = async (e) => {
    e.preventDefault();
    if (!inputMessage.trim() || isLoading) return;

    const userMessage = inputMessage;
    setInputMessage('');
    setChatMessages(prev => [...prev, { role: 'user', content: userMessage }]);
    setIsLoading(true);

    try {
      // Prepare context with current station data
      const stationContext = Object.entries(stationData).map(([station, data]) =>
        `${station}: Voltage=${data.voltage.toFixed(1)}V, Current=${data.current.toFixed(1)}A, Status=${data.status}`
      ).join('\n');

      const prompt = `You are a helpful assistant for the SIF-400 Digital Twin monitoring system.
      Current station readings:
      ${stationContext}

      Active alerts: ${alerts.length > 0 ? alerts.map(a => a.message).join(', ') : 'None'}

      User question: ${userMessage}

      Please provide a concise, helpful response about the voltage and current status of the stations.`;

      const response = await window.claude.complete(prompt);

      setChatMessages(prev => [...prev, { role: 'assistant', content: response }]);
    } catch (error) {
      setChatMessages(prev => [...prev, {
        role: 'assistant',
        content: 'I apologize, but I encountered an error processing your request. Please try again.'
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  // Station Card Component
  const StationCard = ({ stationId, data }) => {
    const isWarning = data.status === 'warning';

    return (
      <div className={`bg-white rounded-xl shadow-lg p-6 transition-all duration-300 ${
        isWarning ? 'ring-2 ring-orange-400' : ''
      }`}>
        <div className="flex justify-between items-start mb-4">
          <h3 className="text-lg font-semibold text-gray-800">{stationId}</h3>
          <div className={`p-2 rounded-full ${
            isWarning ? 'bg-orange-100' : 'bg-green-100'
          }`}>
            {isWarning ? (
              <AlertTriangle className="w-5 h-5 text-orange-600" />
            ) : (
              <CheckCircle className="w-5 h-5 text-green-600" />
            )}
          </div>
        </div>

        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Zap className="w-4 h-4 text-blue-600" />
              <span className="text-sm text-gray-600">Voltage</span>
            </div>
            <span className="text-xl font-bold text-gray-800">
              {data.voltage.toFixed(1)} V
            </span>
          </div>

          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Activity className="w-4 h-4 text-purple-600" />
              <span className="text-sm text-gray-600">Current</span>
            </div>
            <span className="text-xl font-bold text-gray-800">
              {data.current.toFixed(1)} A
            </span>
          </div>

          <div className="mt-4 h-16">
            <div className="flex items-end h-full gap-1">
              {data.trend.slice(-10).map((point, idx) => {
                const height = ((point.voltage - 215) / 10) * 100;
                return (
                  <div
                    key={idx}
                    className="flex-1 bg-blue-400 rounded-t opacity-70 transition-all duration-300"
                    style={{ height: `${height}%` }}
                  />
                );
              })}
            </div>
            <div className="text-xs text-gray-500 mt-1">Voltage Trend</div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="bg-white rounded-2xl shadow-lg p-6 mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-indigo-100 rounded-xl">
                <Activity className="w-8 h-8 text-indigo-600" />
              </div>
              <div>
                <h1 className="text-3xl font-bold text-gray-800">SIF-400 Digital Twin</h1>
                <p className="text-gray-600">Real-time Voltage & Current Monitoring</p>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
              <span className="text-sm text-gray-600">Live Monitoring</span>
            </div>
          </div>
        </div>

        {/* Main Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Station Cards */}
          <div className="lg:col-span-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {Object.entries(stationData).map(([stationId, data]) => (
                <StationCard key={stationId} stationId={stationId} data={data} />
              ))}
            </div>

            {/* Alerts Section */}
            {alerts.length > 0 && (
              <div className="mt-6 bg-orange-50 rounded-xl p-4">
                <h3 className="font-semibold text-orange-800 mb-3 flex items-center gap-2">
                  <AlertTriangle className="w-5 h-5" />
                  Active Alerts
                </h3>
                <div className="space-y-2">
                  {alerts.slice(-3).map(alert => (
                    <div key={alert.id} className="bg-white rounded-lg p-3 flex justify-between items-center">
                      <div>
                        <span className="font-medium text-gray-800">{alert.station}</span>
                        <span className="text-gray-600 ml-2">{alert.message}</span>
                      </div>
                      <span className="text-xs text-gray-500">{alert.timestamp}</span>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </div>

          {/* Chat Interface */}
          <div className="bg-white rounded-xl shadow-lg p-6 flex flex-col h-[600px]">
            <div className="flex items-center gap-3 mb-4 pb-4 border-b">
              <div className="p-2 bg-indigo-100 rounded-lg">
                <Bot className="w-6 h-6 text-indigo-600" />
              </div>
              <div>
                <h3 className="font-semibold text-gray-800">AI Assistant</h3>
                <p className="text-sm text-gray-600">Ask about station status</p>
              </div>
            </div>

            <div className="flex-1 overflow-y-auto mb-4 space-y-3">
              {chatMessages.map((msg, idx) => (
                <div
                  key={idx}
                  className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
                >
                  <div
                    className={`max-w-[80%] rounded-lg p-3 ${
                      msg.role === 'user'
                        ? 'bg-indigo-600 text-white'
                        : 'bg-gray-100 text-gray-800'
                    }`}
                  >
                    {msg.content}
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 rounded-lg p-3">
                    <div className="flex gap-1">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-100"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-200"></div>
                    </div>
                  </div>
                </div>
              )}
              <div ref={chatEndRef} />
            </div>

            <div className="flex gap-2">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleChatSubmit(e)}
                placeholder="Ask about voltage, current, or anomalies..."
                className="flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-indigo-500"
                disabled={isLoading}
              />
              <button
                onClick={handleChatSubmit}
                disabled={isLoading || !inputMessage.trim()}
                className="p-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
              >
                <Send className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SIF400DigitalTwin;
